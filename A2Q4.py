# -*- coding: utf-8 -*-
"""A2Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ujzfVyFTTY5ySdysSfb90Xm5OsCMvCUu
"""

import numpy as np  
from pandas import *
with open('exchrate.txt') as f:
    lines = f.readlines()[9:] #store lines in lines list but skip first 9 lines of txt

x1 = np.array([])
x2 = np.array([])
x3 = np.array([])
x4 = np.array([])
x5 = np.array([])
  
for x in range(len(lines)): 
    l  = lines[x].split()      
    x1 = np.append(x1,int(l[0])/10000) 
    x2 = np.append(x2,int(l[1])/10000)   
    x3 = np.append(x3,int(l[2])/10000)   
    x4 = np.append(x4,int(l[3])/10000)   
    x5 = np.append(x5,int(l[4])/10000)

eps = 10e-13 #1 - eps = 0.999999999999  
def I(x, y):  
    N = len(x)  
    M = int(np.floor(1+np.log2(N)+0.5))
    xMin = min(x)
    yMin = min(y) 
     
    zX = []
    pX = []   
    pY = [] 

    normX = (x - xMin) 
    xMax = max(normX)
    normX  = normX * (1 - eps) / xMax #array after it has been normalized 
    
    normY = (y - yMin) 
    yMax = max(normY)
    normY  = normY * (1 - eps) / yMax #array after it has been normalized 

    indexX = (np.floor(normX * M) + 1).astype(int) #don't use math.floor since it returns float 
    indexY = (np.floor(normY * M) + 1).astype(int) #don't use math.floor since it returns float
    f = np.zeros([M, M]) #returns an array of size Mi filled with zeros

    for i in range(1, M):
        zX.append((2*i - 1) / (2*M)) 
    zY = zX
    
    for i in range(N):
        f[indexX[i] - 1][indexY[i] - 1] += 1

    pXY = ((f / N) + eps) 

    for i in range(0, M):  
      pX.append(sum(row[i] for row in pXY))  #store all col elements and store in list
      pY = [sum(i) for i in pXY] #sum all row elements and store in list
    
    hX = round(-1 * sum(pX * np.log2(pX)),3)
    hY = round(-1 * sum(pY * np.log2(pY)),3)
    hXY = round(-1 * sum(pXY.flatten() * np.log2(pXY.flatten())),3) #check if removing -ve was correct
    return hX, hY, (hX + hY - hXY)

def distI(x,y,hX,hY):
  _, _,info = I(x,y)
  d = 1 - (2*info/(hX + hY))
  return d

infoArray = [[0]*5 for i in range(5)] #initialize 5x5 array filled with zeros
distArray = [[0]*6 for i in range(6)] #initialize 6x6 array filled with zeros
array = [x1,x2,x3,x4,x5]  
labels1 = ['x1','x2','x3','x4','x5']
labels2 = ['x1','x2','x3','x4','x5','average']
for i in range(5):
  for j in range(5): 
    _, _,infoArray[i][j] = I(array[i],array[j]) 
for l in range(0, 5):
  for m in range(0, 5): 
      hX,hY, _ = I(array[l],array[m])
      distArray[l][m] = distI(array[l],array[m],hX,hY)

info = DataFrame(infoArray,columns = labels1, index = labels1)
distances = DataFrame(distArray,columns = labels2, index = labels2)

distances['average'] = distances.iloc[range(0,5), range(0,5)].mean(axis=1) #column 'average'
distances.loc['average'] = distances.iloc[range(0,5), range(0,5)].mean(axis=0) #row 'average'

print(DataFrame(info))

print(DataFrame(distances))